/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_NR_PP_PKG_S_V
`define SKY130_FD_SC_HS__UDP_DFF_NR_PP_PKG_S_V

/**
 * udp_dff$NR_pp$PKG$s: Negative edge triggered D flip-flop with
 *                      active high
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$NR_pp$PKG$s (
    Q      ,
    D      ,
    CLK_N  ,
    RESET  ,
    SLEEP_B,
    KAPWR  ,
    VGND   ,
    VPWR
);

    output Q      ;
    input  D      ;
    input  CLK_N  ;
    input  RESET  ;
    input  SLEEP_B;
    input  KAPWR  ;
    input  VGND   ;
    input  VPWR   ;

    reg Q;

    table
     //  D  CLK_N RESET SLEEP_B KAPWR VGND VPWR :  Qt : Qt+1
         ?    ?     ?      0      1    0    *   :  ?  :  -    ; // Retain state during sleep
         ?    ?     *      0      1    0    ?   :  ?  :  -    ; // Retain state during sleep
         ?    *     ?      0      1    0    ?   :  ?  :  -    ; // Retain state during sleep
         ?    1     b      f      1    0    1   :  ?  :  -    ; // Retain
         ?    1     0      r      1    0    1   :  ?  :  -    ; // Retain
         ?    ?     x      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change if clear is unknown
         ?    x     ?      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is high
         ?    ?     ?      *      1    0    x   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         ?    ?     ?      *      1    0    0   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         1    f     0      1      1    0    1   :  ?  :  1    ; // clocked data
         0    f     0      1      1    0    1   :  ?  :  0    ;
         0    f     x      1      1    0    1   :  ?  :  0    ; // pessimism
         0    ?     x      1      1    0    1   :  0  :  0    ; // pessimism
         1    1     x      1      1    0    1   :  0  :  0    ; // pessimism
         1    x    (?x)    1      1    0    1   :  0  :  0    ; // pessimism
         1    0    (?x)    1      1    0    1   :  0  :  0    ; // pessimism
         x    1     x      1      1    0    1   :  0  :  0    ; // pessimism
         x    x    (?x)    1      1    0    1   :  0  :  0    ; // pessimism
         x    0    (?x)    1      1    0    1   :  0  :  0    ; // pessimism
         1   (x0)   0      1      1    0    1   :  1  :  1    ; // reducing pessimism
         0   (x0)   0      1      1    0    1   :  0  :  0    ;
         1   (1x)   0      1      1    0    1   :  1  :  1    ;
         0   (1x)   0      1      1    0    1   :  0  :  0    ;
         ?    ?     1      1      1    0    1   :  ?  :  0    ; // asynchronous clear
         ?   (?1)   ?      1      1    0    1   :  ?  :  -    ; // ignore riseing clock
         ?   (0x)   ?      1      1    0    1   :  ?  :  -    ; // ignore riseing clock
         *    ?     ?      1      1    0    1   :  ?  :  -    ; // ignore the edges on data
         ?    ?    (?0)    1      1    0    1   :  ?  :  -    ; // ignore the edges on clear
         ?    ?     ?      ?      *    ?    1   :  ?  :  x    ; // any change on kapwr
         ?    ?     ?      ?      ?    *    1   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_NR_PP_PKG_S_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_NR_PP_PKG_SN_V
`define SKY130_FD_SC_HS__UDP_DFF_NR_PP_PKG_SN_V

/**
 * udp_dff$NR_pp$PKG$sN: Negative edge triggered D flip-flop with
 *                       active high
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$NR_pp$PKG$sN (
    Q       ,
    D       ,
    CLK_N   ,
    RESET   ,
    SLEEP_B ,
    NOTIFIER,
    KAPWR   ,
    VGND    ,
    VPWR
);

    output Q       ;
    input  D       ;
    input  CLK_N   ;
    input  RESET   ;
    input  SLEEP_B ;
    input  NOTIFIER;
    input  KAPWR   ;
    input  VGND    ;
    input  VPWR    ;

    reg Q;

    table
     //  D  CLK_N RESET SLEEP_B NOTIFIER KAPWR VGND VPWR :  Qt : Qt+1
         ?    ?     ?      0       ?       1    0    *   :  ?  :  -    ; // Retain state during sleep
         ?    ?     *      0       ?       1    0    ?   :  ?  :  -    ; // Retain state during sleep
         ?    *     ?      0       ?       1    0    ?   :  ?  :  -    ; // Retain state during sleep
         ?    1     b      f       ?       1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?    1     0      r       ?       1    0    1   :  ?  :  -    ;
         ?    ?     x      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change if clear is unknown
         ?    x     ?      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?    ?     ?      *       ?       1    0    x   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         ?    ?     ?      *       ?       1    0    0   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         1    f     0      1       ?       1    0    1   :  ?  :  1    ; // clocked data
         0    f     0      1       ?       1    0    1   :  ?  :  0    ;
         0    f     x      1       ?       1    0    1   :  ?  :  0    ; // pessimism
         0    ?     x      1       ?       1    0    1   :  0  :  0    ; // pessimism
         1    1     x      1       ?       1    0    1   :  0  :  0    ; // pessimism
         1    x    (?x)    1       ?       1    0    1   :  0  :  0    ; // pessimism
         1    0    (?x)    1       ?       1    0    1   :  0  :  0    ; // pessimism
         x    1     x      1       ?       1    0    1   :  0  :  0    ; // pessimism
         x    x    (?x)    1       ?       1    0    1   :  0  :  0    ; // pessimism
         x    0    (?x)    1       ?       1    0    1   :  0  :  0    ; // pessimism
         1   (x0)   0      1       ?       1    0    1   :  1  :  1    ; // reducing pessimism
         0   (x0)   0      1       ?       1    0    1   :  0  :  0    ;
         1   (1x)   0      1       ?       1    0    1   :  1  :  1    ;
         0   (1x)   0      1       ?       1    0    1   :  0  :  0    ;
         ?    ?     1      1       ?       1    0    1   :  ?  :  0    ; // asynchronous clear
         ?   (?1)   ?      1       ?       1    0    1   :  ?  :  -    ; // ignore riseing clock
         ?   (0x)   ?      1       ?       1    0    1   :  ?  :  -    ; // ignore riseing clock
         *    ?     ?      1       ?       1    0    1   :  ?  :  -    ; // ignore the edges on data
         ?    ?    (?0)    1       ?       1    0    1   :  ?  :  -    ; // ignore the edges on clear
         ?    ?     ?      1       *       1    0    1   :  ?  :  x    ; // any change on notifier
         ?    ?     ?      ?       ?       *    ?    1   :  ?  :  x    ; // any change on kapwr
         ?    ?     ?      ?       ?       ?    *    1   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_NR_PP_PKG_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_NSR_PP_PG_V
`define SKY130_FD_SC_HS__UDP_DFF_NSR_PP_PG_V

/**
 * udp_dff$NSR_pp$PG: Negative edge triggered D flip-flop
 *                    (Q output UDP) with both active high reset and
 *                    set (set dominate). Includes VPWR and VGND power
 *                    pins.
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$NSR_pp$PG (
    Q    ,
    SET  ,
    RESET,
    CLK_N,
    D    ,
    VPWR ,
    VGND
);

    output Q    ;
    input  SET  ;
    input  RESET;
    input  CLK_N;
    input  D    ;
    input  VPWR ;
    input  VGND ;

    reg Q;

    table
     // SET RESET CLK_N  D  VPWR VGND :  Qt : Qt+1
         0    1     ?    ?   1    0   :  ?  :  0    ; // Asserting reset
         0    *     ?    ?   1    0   :  0  :  0    ; // Changing reset
         1    ?     ?    ?   1    0   :  ?  :  1    ; // Asserting set (dominates reset)
         *    0     ?    ?   1    0   :  1  :  1    ; // Changing set
         0    ?    (01)  0   1    0   :  ?  :  0    ; // rising clock
         ?    0    (01)  1   1    0   :  ?  :  1    ; // rising clock
         0    ?     p    0   1    0   :  0  :  0    ; // potential rising clock
         ?    0     p    1   1    0   :  1  :  1    ; // potential rising clock
         0    0     n    ?   1    0   :  ?  :  -    ; // Clock falling register output does not change
         0    0     ?    *   1    0   :  ?  :  -    ; // Changing Data
         ?    ?     ?    ?   *    0   :  ?  :  x    ; // any change on vpwr
         ?    ?     ?    ?   ?    *   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_NSR_PP_PG_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_NSR_PP_PG_N_V
`define SKY130_FD_SC_HS__UDP_DFF_NSR_PP_PG_N_V

/**
 * udp_dff$NSR_pp$PG$N: Negative edge triggered D flip-flop
 *                      (Q output UDP) with both active high reset and
 *                      set (set dominate). Includes VPWR and VGND
 *                      power pins and notifier pin.
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$NSR_pp$PG$N (
    Q       ,
    SET     ,
    RESET   ,
    CLK_N   ,
    D       ,
    NOTIFIER,
    VPWR    ,
    VGND
);

    output Q       ;
    input  SET     ;
    input  RESET   ;
    input  CLK_N   ;
    input  D       ;
    input  NOTIFIER;
    input  VPWR    ;
    input  VGND    ;

    reg Q;

    table
     // SET RESET CLK_N  D  NOTIFIER VPWR VGND :  Qt : Qt+1
         0    1     ?    ?     ?      1    0   :  ?  :  0    ; // Asserting reset
         0    *     ?    ?     ?      1    0   :  0  :  0    ; // Changing reset
         1    ?     ?    ?     ?      1    0   :  ?  :  1    ; // Asserting set  (dominates reset)
         *    0     ?    ?     ?      1    0   :  1  :  1    ; // Changing set
         0    ?    (01)  0     ?      1    0   :  ?  :  0    ; // rising clock
         ?    0    (01)  1     ?      1    0   :  ?  :  1    ; // rising clock
         0    ?     p    0     ?      1    0   :  0  :  0    ; // potential rising clock
         ?    0     p    1     ?      1    0   :  1  :  1    ; // potential rising clock
         0    0     n    ?     ?      1    0   :  ?  :  -    ; // Clock falling register output does not change
         0    0     ?    *     ?      1    0   :  ?  :  -    ; // Changing Data
         ?    ?     ?    ?     *      1    0   :  ?  :  X    ; // go to X on notify
         ?    ?     ?    ?     ?      *    0   :  ?  :  X    ; // any change on vpwr
         ?    ?     ?    ?     ?      ?    *   :  ?  :  X    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_NSR_PP_PG_N_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_P_PP_PG_V
`define SKY130_FD_SC_HS__UDP_DFF_P_PP_PG_V

/**
 * udp_dff$P_pp$PG: Positive edge triggered D flip-flop
 *                  (Q output UDP).
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$P_pp$PG (
    Q   ,
    D   ,
    CLK ,
    VPWR,
    VGND
);

    output Q   ;
    input  D   ;
    input  CLK ;
    input  VPWR;
    input  VGND;

    reg Q;

    table
     //  D  CLK  VPWR VGND :  Qt : Qt+1
         1  (01)  1    0   :  ?  :  1    ; // clocked data
         0  (01)  1    0   :  ?  :  0    ;
         1  (x1)  1    0   :  1  :  1    ; // reducing pessimism
         0  (x1)  1    0   :  0  :  0    ;
         1  (0x)  1    0   :  1  :  1    ;
         0  (0x)  1    0   :  0  :  0    ;
         ?  (1x)  1    0   :  ?  :  -    ; // no change on falling edge
         ?  (?0)  1    0   :  ?  :  -    ;
         *   ?    1    0   :  ?  :  -    ; // ignore edges on data
         ?   ?    *    ?   :  ?  :  x    ; // any change on vpwr
         ?   ?    ?    *   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_P_PP_PG_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_P_PP_PG_N_V
`define SKY130_FD_SC_HS__UDP_DFF_P_PP_PG_N_V

/**
 * udp_dff$P_pp$PG$N: Positive edge triggered D flip-flop
 *                    (Q output UDP).
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$P_pp$PG$N (
    Q       ,
    D       ,
    CLK     ,
    NOTIFIER,
    VPWR    ,
    VGND
);

    output Q       ;
    input  D       ;
    input  CLK     ;
    input  NOTIFIER;
    input  VPWR    ;
    input  VGND    ;

    reg Q;

    table
     //  D  CLK  NOTIFIER VPWR VGND :  Qt : Qt+1
         1  (01)    ?      1    0   :  ?  :  1    ; // clocked data
         0  (01)    ?      1    0   :  ?  :  0    ;
         1  (x1)    ?      1    0   :  1  :  1    ; // reducing pessimism
         0  (x1)    ?      1    0   :  0  :  0    ;
         1  (0x)    ?      1    0   :  1  :  1    ;
         0  (0x)    ?      1    0   :  0  :  0    ;
         ?  (1x)    ?      1    0   :  ?  :  -    ; // no change on falling edge
         ?  (?0)    ?      1    0   :  ?  :  -    ;
         *   ?      ?      1    0   :  ?  :  -    ; // ignore edges on data
         ?   ?      *      1    0   :  ?  :  x    ;
         ?   ?      ?      *    ?   :  ?  :  x    ; // any change on vpwr
         ?   ?      ?      ?    *   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_P_PP_PG_N_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_P_PP_PKG_S_V
`define SKY130_FD_SC_HS__UDP_DFF_P_PP_PKG_S_V

/**
 * udp_dff$P_pp$PKG$s: Positive edge triggered D flip-flop
 *                     (Q output UDP).
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$P_pp$PKG$s (
    Q      ,
    D      ,
    CLK    ,
    SLEEP_B,
    KAPWR  ,
    VGND   ,
    VPWR
);

    output Q      ;
    input  D      ;
    input  CLK    ;
    input  SLEEP_B;
    input  KAPWR  ;
    input  VGND   ;
    input  VPWR   ;

    reg Q;

    table
     //  D  CLK  SLEEP_B KAPWR VGND VPWR :  Qt : Qt+1
         ?   ?      0      1    0    *   :  ?  :  -    ; // Retain state during sleep
         ?   0      f      1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?   0      r      1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?   1      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   x      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   ?      *      1    0    x   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         ?   ?      *      1    0    0   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         1   r      1      1    0    1   :  ?  :  1    ; // clocked data
         0   r      1      1    0    1   :  ?  :  0    ;
         1  (x1)    1      1    0    1   :  1  :  1    ; // reducing pessimism
         0  (x1)    1      1    0    1   :  0  :  0    ;
         1  (0x)    1      1    0    1   :  1  :  1    ;
         0  (0x)    1      1    0    1   :  0  :  0    ;
         ?   n      1      1    0    1   :  ?  :  -    ; // no change on falling edge of CLK
         *   ?      ?      1    0    1   :  ?  :  -    ; // ignore edges on data
         ?   ?      ?      *    ?    1   :  ?  :  x    ; // unknown if kapwr changes
         ?   ?      ?      ?    *    1   :  ?  :  x    ; // unknown if vgnd changes
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_P_PP_PKG_S_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_P_PP_PKG_SN_V
`define SKY130_FD_SC_HS__UDP_DFF_P_PP_PKG_SN_V

/**
 * udp_dff$P_pp$PKG$sN: Positive edge triggered D flip-flop
 *                      (Q output UDP).
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$P_pp$PKG$sN (
    Q       ,
    D       ,
    CLK     ,
    SLEEP_B ,
    NOTIFIER,
    KAPWR   ,
    VGND    ,
    VPWR
);

    output Q       ;
    input  D       ;
    input  CLK     ;
    input  SLEEP_B ;
    input  NOTIFIER;
    input  KAPWR   ;
    input  VGND    ;
    input  VPWR    ;

    reg Q;

    table
     //  D  CLK  SLEEP_B NOTIFIER KAPWR VGND VPWR :  Qt : Qt+1
         ?   ?      0       ?       1    0    *   :  ?  :  -    ; // Retain state during sleep
         ?   0      f       ?       1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?   0      r       ?       1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?   1      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   x      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   ?      *       ?       1    0    x   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         ?   ?      *       ?       1    0    0   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         1   r      1       ?       1    0    1   :  ?  :  1    ; // clocked data
         0   r      1       ?       1    0    1   :  ?  :  0    ;
         1  (x1)    1       ?       1    0    1   :  1  :  1    ; // reducing pessimism
         0  (x1)    1       ?       1    0    1   :  0  :  0    ;
         1  (0x)    1       ?       1    0    1   :  1  :  1    ;
         0  (0x)    1       ?       1    0    1   :  0  :  0    ;
         ?  (1x)    1       ?       1    0    1   :  ?  :  -    ; // no change on falling edge
         ?  (?0)    1       ?       1    0    1   :  ?  :  -    ;
         *   ?      ?       ?       1    0    1   :  ?  :  -    ; // ignore edges on data
         ?   ?      1       *       1    0    1   :  ?  :  x    ; // any change on notifier
         ?   ?      ?       ?       *    ?    1   :  ?  :  x    ; // unknown if kapwr changes
         ?   ?      ?       ?       ?    *    1   :  ?  :  x    ; // unknown if vgnd changes
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_P_PP_PKG_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_P_PP_SN_V
`define SKY130_FD_SC_HS__UDP_DFF_P_PP_SN_V

/**
 * udp_dff$P_pp$sN: Positive edge triggered D flip-flop
 *                  (Q output UDP).
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$P_pp$sN (
    Q       ,
    D       ,
    CLK     ,
    SLEEP_B ,
    NOTIFIER
);

    output Q       ;
    input  D       ;
    input  CLK     ;
    input  SLEEP_B ;
    input  NOTIFIER;

    reg Q;

    table
     //  D  CLK  SLEEP_B NOTIFIER :  Qt : Qt+1
         ?   ?      0       ?     :  ?  :  -    ; // Retain state during sleep
         ?   0      r       ?     :  ?  :  -    ; // Retain state exiting sleep
         ?   1      *       ?     :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   x      *       ?     :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         1   r      1       ?     :  ?  :  1    ; // clocked data
         0   r      1       ?     :  ?  :  0    ;
         1  (x1)    1       ?     :  1  :  1    ; // reducing pessimism
         0  (x1)    1       ?     :  0  :  0    ;
         1  (0x)    1       ?     :  1  :  1    ;
         0  (0x)    1       ?     :  0  :  0    ;
         ?  (1x)    1       ?     :  ?  :  -    ; // no change on falling edge
         ?  (?0)    1       ?     :  ?  :  -    ;
         *   ?      ?       ?     :  ?  :  -    ; // ignore edges on data
         ?   ?      1       *     :  ?  :  x    ; // any change on notifier
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_P_PP_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_PE_PP_PG_V
`define SKY130_FD_SC_HS__UDP_DFF_PE_PP_PG_V

/**
 * udp_dff$PE_pp$PG: Positive edge triggered enabled D flip-flop
 *                   (Q output UDP).
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$PE_pp$PG (
    Q      ,
    D      ,
    CLK    ,
    DATA_EN,
    VPWR   ,
    VGND
);

    output Q      ;
    input  D      ;
    input  CLK    ;
    input  DATA_EN;
    input  VPWR   ;
    input  VGND   ;

    reg Q;

    table
     //  D  CLK  DATA_EN VPWR VGND :  Qt : Qt+1
         ?   ?      0     1    0   :  ?  :  -    ; // no change when disabled
         ?   ?     (01)   1    0   :  ?  :  -    ; // no change when disabled
         1  (01)    1     1    0   :  ?  :  1    ; // clocked data
         0  (01)    1     1    0   :  ?  :  0    ;
         1  (x1)    1     1    0   :  1  :  1    ; // reducing pessimism
         0  (x1)    1     1    0   :  0  :  0    ;
         1  (0x)    1     1    0   :  1  :  1    ;
         0  (0x)    1     1    0   :  0  :  0    ;
         ?  (1x)    1     1    0   :  ?  :  -    ; // no change on falling edge
         ?  (?0)    1     1    0   :  ?  :  -    ;
         *   ?      1     1    0   :  ?  :  -    ; // ignore edges on data
         ?   ?      ?     *    ?   :  ?  :  x    ; // any change on vpwr
         ?   ?      ?     ?    *   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_PE_PP_PG_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_PE_PP_PG_N_V
`define SKY130_FD_SC_HS__UDP_DFF_PE_PP_PG_N_V

/**
 * udp_dff$PE_pp$PG$N: Positive edge triggered enabled D flip-flop
 *                     (Q output UDP).
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$PE_pp$PG$N (
    Q       ,
    D       ,
    CLK     ,
    DATA_EN ,
    NOTIFIER,
    VPWR    ,
    VGND
);

    output Q       ;
    input  D       ;
    input  CLK     ;
    input  DATA_EN ;
    input  NOTIFIER;
    input  VPWR    ;
    input  VGND    ;

    reg Q;

    table
     //  D  CLK DATA_EN NOTIFIER VPWR VGND :  Qt : Qt+1
         ?   ?     0       ?      1    0   :  ?  :  -    ; // no change when disabled
         ?   ?     r       ?      1    0   :  ?  :  -    ; // no change when disabled
         1   r     1       ?      1    0   :  ?  :  1    ; // clocked data
         0   r     1       ?      1    0   :  ?  :  0    ; // clocked data
         1   *     1       ?      1    0   :  1  :  1    ; // reducing pessimism
         0   *     1       ?      1    0   :  0  :  0    ; // reducing pessimism
         ?   f     1       ?      1    0   :  ?  :  -    ; // no change on falling edge
         ?   ?     1       *      1    0   :  ?  :  x    ; // any notifier changed
         ?   ?     ?       ?      *    ?   :  ?  :  x    ; // any change on vpwr
         ?   ?     ?       ?      ?    *   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_PE_PP_PG_N_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_PR_PP_PG_V
`define SKY130_FD_SC_HS__UDP_DFF_PR_PP_PG_V

/**
 * udp_dff$PR_pp$PG: Positive edge triggered D flip-flop with active
 *                   high
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$PR_pp$PG (
    Q    ,
    D    ,
    CLK  ,
    RESET,
    VPWR ,
    VGND
);

    output Q    ;
    input  D    ;
    input  CLK  ;
    input  RESET;
    input  VPWR ;
    input  VGND ;

    reg Q;

    table
     //  D  CLK  RESET VPWR VGND :  Qt : Qt+1
         *   b     0    1    0   :  ?  :  -    ; // data event, hold unless CP==x
         ?  (?0)   0    1    0   :  ?  :  -    ; // CP => 0, hold
         ?   b    (?0)  1    0   :  ?  :  -    ; // R => 0, hold unless CP==x
         ?   ?     1    1    0   :  ?  :  0    ; // async reset
         0   r     ?    1    0   :  ?  :  0    ; // clock data on CP
         1   r     0    1    0   :  ?  :  1    ; // clock data on CP
         0  (x1)   ?    1    0   :  0  :  0    ; // possible CP, hold when D==Q==0
         1  (x1)   0    1    0   :  1  :  1    ; // possible CP, hold when D==Q==1
         0   x     ?    1    0   :  0  :  0    ; // unkown CP, hold when D==Q==0
         1   x     0    1    0   :  1  :  1    ; // unkown CP, hold when D==Q==1
         ?   b    (?x)  1    0   :  0  :  0    ; // R=>x, hold when Q==0 unless CP==x
         ?   ?     ?    *    ?   :  ?  :  x    ; // Q => X on any change on vpwr
         ?   ?     ?    ?    *   :  ?  :  x    ; // Q => X on any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_PR_PP_PG_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_PR_PP_PG_N_V
`define SKY130_FD_SC_HS__UDP_DFF_PR_PP_PG_N_V

/**
 * udp_dff$PR_pp$PG$N: Positive edge triggered D flip-flop with active
 *                     high
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$PR_pp$PG$N (
    Q       ,
    D       ,
    CLK     ,
    RESET   ,
    NOTIFIER,
    VPWR    ,
    VGND
);

    output Q       ;
    input  D       ;
    input  CLK     ;
    input  RESET   ;
    input  NOTIFIER;
    input  VPWR    ;
    input  VGND    ;

    reg Q;

    table
     //  D  CLK  RESET NOTIFIER VPWR VGND :  Qt : Qt+1
         *   b     0      ?      1    0   :  ?  :  -    ; // data event, hold unless CP==x
         ?  (?0)   0      ?      1    0   :  ?  :  -    ; // CP => 0, hold
         ?   b    (?0)    ?      1    0   :  ?  :  -    ; // R => 0, hold unless CP==x
         ?   ?     1      ?      1    0   :  ?  :  0    ; // async reset
         0   r     ?      ?      1    0   :  ?  :  0    ; // clock data on CP
         1   r     0      ?      1    0   :  ?  :  1    ; // clock data on CP
         0  (x1)   ?      ?      1    0   :  0  :  0    ; // possible CP, hold when D==Q==0
         1  (x1)   0      ?      1    0   :  1  :  1    ; // possible CP, hold when D==Q==1
         0   x     ?      ?      1    0   :  0  :  0    ; // unkown CP, hold when D==Q==0
         1   x     0      ?      1    0   :  1  :  1    ; // unkown CP, hold when D==Q==1
         ?   b    (?x)    ?      1    0   :  0  :  0    ; // R=>x, hold when Q==0 unless CP==x
         ?   ?     ?      *      1    0   :  ?  :  x    ; // Q => X on any change on notifier
         ?   ?     ?      ?      *    ?   :  ?  :  x    ; // Q => X on any change on vpwr
         ?   ?     ?      ?      ?    *   :  ?  :  x    ; // Q => X on any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_PR_PP_PG_N_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_PR_PP_PKG_S_V
`define SKY130_FD_SC_HS__UDP_DFF_PR_PP_PKG_S_V

/**
 * udp_dff$PR_pp$PKG$s: Positive edge triggered D flip-flop with
 *                      active high
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$PR_pp$PKG$s (
    Q      ,
    D      ,
    CLK    ,
    RESET  ,
    SLEEP_B,
    KAPWR  ,
    VGND   ,
    VPWR
);

    output Q      ;
    input  D      ;
    input  CLK    ;
    input  RESET  ;
    input  SLEEP_B;
    input  KAPWR  ;
    input  VGND   ;
    input  VPWR   ;

    reg Q;

    table
     //  D  CLK  RESET SLEEP_B KAPWR VGND VPWR :  Qt : Qt+1
         ?   ?     ?      0      1    0    ?   :  ?  :  -    ; // Retain state during sleep
         ?   0     0      *      1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?   0     1      *      1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?   0     x      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change if clear is unknown
         ?   1     ?      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   x     ?      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   ?     ?      *      1    0    x   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         ?   ?     ?      *      1    0    0   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         1  (01)   0      1      1    0    1   :  ?  :  1    ; // clocked data
         0  (01)   0      1      1    0    1   :  ?  :  0    ;
         0  (01)   x      1      1    0    1   :  ?  :  0    ; // pessimism
         0   ?     x      1      1    0    1   :  0  :  0    ; // pessimism
         1   0     x      1      1    0    1   :  0  :  0    ; // pessimism
         1   x    (?x)    1      1    0    1   :  0  :  0    ; // pessimism
         1   1    (?x)    1      1    0    1   :  0  :  0    ; // pessimism
         x   0     x      1      1    0    1   :  0  :  0    ; // pessimism
         x   x    (?x)    1      1    0    1   :  0  :  0    ; // pessimism
         x   1    (?x)    1      1    0    1   :  0  :  0    ; // pessimism
         1  (x1)   0      1      1    0    1   :  1  :  1    ; // reducing pessimism
         0  (x1)   0      1      1    0    1   :  0  :  0    ;
         1  (0x)   0      1      1    0    1   :  1  :  1    ;
         0  (0x)   0      1      1    0    1   :  0  :  0    ;
         ?   ?     1      1      1    0    1   :  ?  :  0    ; // asynchronous clear
         ?  (?0)   ?      1      1    0    1   :  ?  :  -    ; // ignore falling clock
         ?  (1x)   ?      1      1    0    1   :  ?  :  -    ; // ignore falling clock
         *   ?     ?      1      1    0    1   :  ?  :  -    ; // ignore the edges on data
         ?   ?    (?0)    1      1    0    1   :  ?  :  -    ; // ignore the edges on clear
         ?   ?     ?      ?      *    ?    1   :  ?  :  x    ; // any change on kapwr
         ?   ?     ?      ?      ?    *    1   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_PR_PP_PKG_S_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_PR_PP_PKG_SN_V
`define SKY130_FD_SC_HS__UDP_DFF_PR_PP_PKG_SN_V

/**
 * udp_dff$PR_pp$PKG$sN: Positive edge triggered D flip-flop with
 *                       active high
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$PR_pp$PKG$sN (
    Q       ,
    D       ,
    CLK     ,
    RESET   ,
    SLEEP_B ,
    NOTIFIER,
    KAPWR   ,
    VGND    ,
    VPWR
);

    output Q       ;
    input  D       ;
    input  CLK     ;
    input  RESET   ;
    input  SLEEP_B ;
    input  NOTIFIER;
    input  KAPWR   ;
    input  VGND    ;
    input  VPWR    ;

    reg Q;

    table
     //  D  CLK  RESET SLEEP_B NOTIFIER KAPWR VGND VPWR :  Qt : Qt+1
         ?   ?     ?      0       ?       1    0    ?   :  ?  :  -    ; // Retain state during sleep
         ?   0     0      *       ?       1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?   0     1      *       ?       1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?   0     x      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change if clear is unknown
         ?   1     ?      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   x     ?      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   ?     ?      *       ?       1    0    x   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         ?   ?     ?      *       ?       1    0    0   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         1  (01)   0      1       ?       1    0    1   :  ?  :  1    ; // clocked data
         0  (01)   0      1       ?       1    0    1   :  ?  :  0    ;
         0  (01)   x      1       ?       1    0    1   :  ?  :  0    ; // pessimism
         0   ?     x      1       ?       1    0    1   :  0  :  0    ; // pessimism
         1   0     x      1       ?       1    0    1   :  0  :  0    ; // pessimism
         1   x    (?x)    1       ?       1    0    1   :  0  :  0    ; // pessimism
         1   1    (?x)    1       ?       1    0    1   :  0  :  0    ; // pessimism
         x   0     x      1       ?       1    0    1   :  0  :  0    ; // pessimism
         x   x    (?x)    1       ?       1    0    1   :  0  :  0    ; // pessimism
         x   1    (?x)    1       ?       1    0    1   :  0  :  0    ; // pessimism
         1  (x1)   0      1       ?       1    0    1   :  1  :  1    ; // reducing pessimism
         0  (x1)   0      1       ?       1    0    1   :  0  :  0    ;
         1  (0x)   0      1       ?       1    0    1   :  1  :  1    ;
         0  (0x)   0      1       ?       1    0    1   :  0  :  0    ;
         ?   ?     1      1       ?       1    0    1   :  ?  :  0    ; // asynchronous clear
         ?  (?0)   ?      1       ?       1    0    1   :  ?  :  -    ; // ignore falling clock
         ?  (1x)   ?      1       ?       1    0    1   :  ?  :  -    ; // ignore falling clock
         *   ?     ?      1       ?       1    0    1   :  ?  :  -    ; // ignore the edges on data
         ?   ?    (?0)    1       ?       1    0    1   :  ?  :  -    ; // ignore the edges on clear
         ?   ?     ?      1       *       1    0    1   :  ?  :  x    ; // any change on notifier
         ?   ?     ?      ?       ?       *    ?    1   :  ?  :  x    ; // any change on kapwr
         ?   ?     ?      ?       ?       ?    *    1   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_PR_PP_PKG_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_PR_PP_SN_V
`define SKY130_FD_SC_HS__UDP_DFF_PR_PP_SN_V

/**
 * udp_dff$PR_pp$sN: Positive edge triggered D flip-flop with active
 *                   high
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$PR_pp$sN (
    Q       ,
    D       ,
    CLK     ,
    RESET   ,
    SLEEP_B ,
    NOTIFIER
);

    output Q       ;
    input  D       ;
    input  CLK     ;
    input  RESET   ;
    input  SLEEP_B ;
    input  NOTIFIER;

    reg Q;

    table
     //  D  CLK  RESET SLEEP_B NOTIFIER :  Qt : Qt+1
         ?   ?     ?      0       ?     :  ?  :  -    ; // Retain state during sleep
         ?   ?     ?     (01)     ?     :  ?  :  -    ; // Retain state during sleep
         1  (01)   0      1       ?     :  ?  :  1    ; // clocked data
         0  (01)   0      1       ?     :  ?  :  0    ;
         0  (01)   x      1       ?     :  ?  :  0    ; // pessimism
         0   ?     x      1       ?     :  0  :  0    ; // pessimism
         1   0     x      1       ?     :  0  :  0    ; // pessimism
         1   x    (?x)    1       ?     :  0  :  0    ; // pessimism
         1   1    (?x)    1       ?     :  0  :  0    ; // pessimism
         x   0     x      1       ?     :  0  :  0    ; // pessimism
         x   x    (?x)    1       ?     :  0  :  0    ; // pessimism
         x   1    (?x)    1       ?     :  0  :  0    ; // pessimism
         1  (x1)   0      1       ?     :  1  :  1    ; // reducing pessimism
         0  (x1)   0      1       ?     :  0  :  0    ;
         1  (0x)   0      1       ?     :  1  :  1    ;
         0  (0x)   0      1       ?     :  0  :  0    ;
         ?   ?     1      1       ?     :  ?  :  0    ; // asynchronous clear
         ?  (?0)   ?      1       ?     :  ?  :  -    ; // ignore falling clock
         ?  (1x)   ?      1       ?     :  ?  :  -    ; // ignore falling clock
         *   ?     ?      1       ?     :  ?  :  -    ; // ignore the edges on data
         ?   ?    (?0)    1       ?     :  ?  :  -    ; // ignore the edges on clear
         ?   ?     ?      1       *     :  ?  :  x    ;
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_PR_PP_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_PS_PP_PG_V
`define SKY130_FD_SC_HS__UDP_DFF_PS_PP_PG_V

/**
 * udp_dff$PS_pp$PG: Positive edge triggered D flip-flop with active
 *                   high
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$PS_pp$PG (
    Q   ,
    D   ,
    CLK ,
    SET ,
    VPWR,
    VGND
);

    output Q   ;
    input  D   ;
    input  CLK ;
    input  SET ;
    input  VPWR;
    input  VGND;

    reg Q;

    table
     //  D  CLK  SET  VPWR VGND :  Qt : Qt+1
         *   b    0    1    0   :  ?  :  -    ; // data event, hold unless CP==x
         ?  (?0)  0    1    0   :  ?  :  -    ; // CP => 0, hold
         ?   b   (?0)  1    0   :  ?  :  -    ; // S => 0, hold unless CP==x
         ?   ?    1    1    0   :  ?  :  1    ; // async set
         0   r    0    1    0   :  ?  :  0    ; // clock data on CP
         1   r    ?    1    0   :  ?  :  1    ; // clock data on CP
         0  (x1)  0    1    0   :  0  :  0    ; // possible CP, hold when D==Q==0
         1  (x1)  ?    1    0   :  1  :  1    ; // possible CP, hold when D==Q==1
         0   x    0    1    0   :  0  :  0    ; // unkown CP, hold when D==Q==0
         1   x    ?    1    0   :  1  :  1    ; // unkown CP, hold when D==Q==1
         ?   b   (?x)  1    0   :  1  :  1    ; // S=>x, hold when Q==1 unless CP==x
         ?   ?    ?    *    ?   :  ?  :  x    ; // Q => X on any change on vpwr
         ?   ?    ?    ?    *   :  ?  :  x    ; // Q => X on any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_PS_PP_PG_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_PS_PP_PG_N_V
`define SKY130_FD_SC_HS__UDP_DFF_PS_PP_PG_N_V

/**
 * udp_dff$PS_pp$PG$N: Positive edge triggered D flip-flop with active
 *                     high
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$PS_pp$PG$N (
    Q       ,
    D       ,
    CLK     ,
    SET     ,
    NOTIFIER,
    VPWR    ,
    VGND
);

    output Q       ;
    input  D       ;
    input  CLK     ;
    input  SET     ;
    input  NOTIFIER;
    input  VPWR    ;
    input  VGND    ;

    reg Q;

    table
     //  D  CLK  SET  NOTIFIER VPWR VGND :  Qt : Qt+1
         *   b    0      ?      1    0   :  ?  :  -    ; // data event, hold unless CP==x
         ?  (?0)  0      ?      1    0   :  ?  :  -    ; // CP => 0, hold
         ?   b   (?0)    ?      1    0   :  ?  :  -    ; // S => 0, hold unless CP==x
         ?   ?    1      ?      1    0   :  ?  :  1    ; // async set
         0   r    0      ?      1    0   :  ?  :  0    ; // clock data on CP
         1   r    ?      ?      1    0   :  ?  :  1    ; // clock data on CP
         0  (x1)  0      ?      1    0   :  0  :  0    ; // possible CP, hold when D==Q==0
         1  (x1)  ?      ?      1    0   :  1  :  1    ; // possible CP, hold when D==Q==1
         0   x    0      ?      1    0   :  0  :  0    ; // unkown CP, hold when D==Q==0
         1   x    ?      ?      1    0   :  1  :  1    ; // unkown CP, hold when D==Q==1
         ?   b   (?x)    ?      1    0   :  1  :  1    ; // S=>x, hold when Q==1 unless CP==x
         ?   ?    ?      *      1    0   :  ?  :  x    ; // Q => X on any change on notifier
         ?   ?    ?      ?      *    ?   :  ?  :  x    ; // Q => X on any change on vpwr
         ?   ?    ?      ?      ?    *   :  ?  :  x    ; // Q => X on any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_PS_PP_PG_N_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_PS_PP_PKG_S_V
`define SKY130_FD_SC_HS__UDP_DFF_PS_PP_PKG_S_V

/**
 * udp_dff$PS_pp$PKG$s: Positive edge triggered D flip-flop with
 *                      active high
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$PS_pp$PKG$s (
    Q      ,
    D      ,
    CLK    ,
    SET    ,
    SLEEP_B,
    KAPWR  ,
    VGND   ,
    VPWR
);

    output Q      ;
    input  D      ;
    input  CLK    ;
    input  SET    ;
    input  SLEEP_B;
    input  KAPWR  ;
    input  VGND   ;
    input  VPWR   ;

    reg Q;

    table
     //  D  CLK  SET  SLEEP_B KAPWR VGND VPWR :  Qt : Qt+1
         ?   ?    ?      0      1    0    ?   :  ?  :  -    ; // Retain state during sleep
         ?   0    0      *      1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?   0    1      *      1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?   0    x      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change if preset is unknown
         ?   1    ?      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   x    ?      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   ?    ?      *      1    0    x   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         ?   ?    ?      *      1    0    0   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         1  (01)  0      1      1    0    1   :  ?  :  1    ; // clocked data
         0  (01)  0      1      1    0    1   :  ?  :  0    ;
         1  (01)  x      1      1    0    1   :  ?  :  1    ; // reducing pessimism
         1   ?    x      1      1    0    1   :  1  :  1    ; // pessimism
         0   0    x      1      1    0    1   :  1  :  1    ; // pessimism
         0   x   (?x)    1      1    0    1   :  1  :  1    ; // pessimism
         0   1   (?x)    1      1    0    1   :  1  :  1    ; // pessimism
         x   0    x      1      1    0    1   :  1  :  1    ; // pessimism
         x   x   (?x)    1      1    0    1   :  1  :  1    ; // pessimism
         x   1   (?x)    1      1    0    1   :  1  :  1    ; // pessimism
         1  (x1)  0      1      1    0    1   :  1  :  1    ; // reducing pessimism
         0  (x1)  0      1      1    0    1   :  0  :  0    ;
         1  (0x)  0      1      1    0    1   :  1  :  1    ;
         0  (0x)  0      1      1    0    1   :  0  :  0    ;
         ?   ?    1      1      1    0    1   :  ?  :  1    ; // asynchronous preset
         ?  (?0)  ?      1      1    0    1   :  ?  :  -    ; // ignore falling clock
         ?  (1x)  ?      1      1    0    1   :  ?  :  -    ; // ignore falling clock
         *   ?    ?      1      1    0    1   :  ?  :  -    ; // ignore the data edges
         ?   ?   (?0)    1      1    0    1   :  ?  :  -    ; // ignore the edges on set
         ?   ?    ?      ?      *    ?    1   :  ?  :  x    ; // any change on kapwr
         ?   ?    ?      ?      ?    *    1   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_PS_PP_PKG_S_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_PS_PP_PKG_SN_V
`define SKY130_FD_SC_HS__UDP_DFF_PS_PP_PKG_SN_V

/**
 * udp_dff$PS_pp$PKG$sN: Positive edge triggered D flip-flop with
 *                       active high
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$PS_pp$PKG$sN (
    Q       ,
    D       ,
    CLK     ,
    SET     ,
    SLEEP_B ,
    NOTIFIER,
    KAPWR   ,
    VGND    ,
    VPWR
);

    output Q       ;
    input  D       ;
    input  CLK     ;
    input  SET     ;
    input  SLEEP_B ;
    input  NOTIFIER;
    input  KAPWR   ;
    input  VGND    ;
    input  VPWR    ;

    reg Q;

    table
     //  D  CLK  SET  SLEEP_B NOTIFIER KAPWR VGND VPWR :  Qt : Qt+1
         ?   ?    ?      0       ?       1    0    ?   :  ?  :  -    ; // Retain state during sleep
         ?   0    0      *       ?       1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?   0    1      *       ?       1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?   0    x      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change if preset is unknown
         ?   1    ?      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   x    ?      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless CLK is low
         ?   ?    ?      *       ?       1    0    x   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         ?   ?    ?      *       ?       1    0    0   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         1  (01)  0      1       ?       1    0    1   :  ?  :  1    ; // clocked data
         0  (01)  0      1       ?       1    0    1   :  ?  :  0    ;
         1  (01)  x      1       ?       1    0    1   :  ?  :  1    ; // reducing pessimism
         1   ?    x      1       ?       1    0    1   :  1  :  1    ; // pessimism
         0   0    x      1       ?       1    0    1   :  1  :  1    ; // pessimism
         0   x   (?x)    1       ?       1    0    1   :  1  :  1    ; // pessimism
         0   1   (?x)    1       ?       1    0    1   :  1  :  1    ; // pessimism
         x   0    x      1       ?       1    0    1   :  1  :  1    ; // pessimism
         x   x   (?x)    1       ?       1    0    1   :  1  :  1    ; // pessimism
         x   1   (?x)    1       ?       1    0    1   :  1  :  1    ; // pessimism
         1  (x1)  0      1       ?       1    0    1   :  1  :  1    ; // reducing pessimism
         0  (x1)  0      1       ?       1    0    1   :  0  :  0    ;
         1  (0x)  0      1       ?       1    0    1   :  1  :  1    ;
         0  (0x)  0      1       ?       1    0    1   :  0  :  0    ;
         ?   ?    1      1       ?       1    0    1   :  ?  :  1    ; // asynchronous preset
         ?  (?0)  ?      1       ?       1    0    1   :  ?  :  -    ; // ignore falling clock
         ?  (1x)  ?      1       ?       1    0    1   :  ?  :  -    ; // ignore falling clock
         *   ?    ?      1       ?       1    0    1   :  ?  :  -    ; // ignore the data edges
         ?   ?   (?0)    1       ?       1    0    1   :  ?  :  -    ; // ignore the edges on set
         ?   ?    ?      1       *       1    0    1   :  ?  :  x    ; // any change on notifier
         ?   ?    ?      ?       ?       *    ?    1   :  ?  :  x    ; // any change on kapwr
         ?   ?    ?      ?       ?       ?    *    1   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_PS_PP_PKG_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DFF_PS_PP_SN_V
`define SKY130_FD_SC_HS__UDP_DFF_PS_PP_SN_V

/**
 * udp_dff$PS_pp$sN: Positive edge triggered D flip-flop with active
 *                   high
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dff$PS_pp$sN (
    Q       ,
    D       ,
    CLK     ,
    SET     ,
    SLEEP_B ,
    NOTIFIER
);

    output Q       ;
    input  D       ;
    input  CLK     ;
    input  SET     ;
    input  SLEEP_B ;
    input  NOTIFIER;

    reg Q;

    table
     //  D  CLK  SET  SLEEP_B NOTIFIER :  Qt : Qt+1
         ?   ?    ?      0       ?     :  ?  :  -    ; // Retain state during sleep
         ?   ?    ?     (01)     ?     :  ?  :  -    ; // Retain state during sleep
         1  (01)  0      1       ?     :  ?  :  1    ; // clocked data
         0  (01)  0      1       ?     :  ?  :  0    ;
         1  (01)  x      1       ?     :  ?  :  1    ; // reducing pessimism
         1   ?    x      1       ?     :  1  :  1    ; // pessimism
         0   0    x      1       ?     :  1  :  1    ; // pessimism
         0   x   (?x)    1       ?     :  1  :  1    ; // pessimism
         0   1   (?x)    1       ?     :  1  :  1    ; // pessimism
         x   0    x      1       ?     :  1  :  1    ; // pessimism
         x   x   (?x)    1       ?     :  1  :  1    ; // pessimism
         x   1   (?x)    1       ?     :  1  :  1    ; // pessimism
         1  (x1)  0      1       ?     :  1  :  1    ; // reducing pessimism
         0  (x1)  0      1       ?     :  0  :  0    ;
         1  (0x)  0      1       ?     :  1  :  1    ;
         0  (0x)  0      1       ?     :  0  :  0    ;
         ?   ?    1      1       ?     :  ?  :  1    ; // asynchronous preset
         ?  (?0)  ?      1       ?     :  ?  :  -    ; // ignore falling clock
         ?  (1x)  ?      1       ?     :  ?  :  -    ; // ignore falling clock
         *   ?    ?      1       ?     :  ?  :  -    ; // ignore the data edges
         ?   ?   (?0)    1       ?     :  ?  :  -    ; // ignore the edges on set
         ?   ?    ?      1       *     :  ?  :  x    ;
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DFF_PS_PP_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_P_PP_PG_V
`define SKY130_FD_SC_HS__UDP_DLATCH_P_PP_PG_V

/**
 * udp_dlatch$P_pp$PG: D-latch, gated standard drive / active high
 *                     (Q output UDP)
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$P_pp$PG (
    Q   ,
    D   ,
    GATE,
    VPWR,
    VGND
);

    output Q   ;
    input  D   ;
    input  GATE;
    input  VPWR;
    input  VGND;

    reg Q;

    table
     //  D   GATE VPWR VGND : Qtn : Qtn+1
         *    0    1    0   :  ?  :   -    ;
         ?   (?0)  1    0   :  ?  :   -    ;
         ?   (1x)  1    0   :  ?  :   -    ;
         0   (0x)  1    0   :  0  :   0    ;
         1   (0x)  1    0   :  1  :   1    ;
         0   (x1)  1    0   :  ?  :   0    ;
         1   (x1)  1    0   :  ?  :   1    ;
        (?0)  1    1    0   :  ?  :   0    ;
        (?1)  1    1    0   :  ?  :   1    ;
         0   (01)  1    0   :  ?  :   0    ;
         1   (01)  1    0   :  ?  :   1    ;
        (?1)  x    1    0   :  1  :   1    ; // Reducing pessimism.
        (?0)  x    1    0   :  0  :   0    ;
         ?    ?    *    ?   :  ?  :   x    ; // any change on vpwr
         ?    ?    ?    *   :  ?  :   x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_P_PP_PG_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_P_PP_PG_N_V
`define SKY130_FD_SC_HS__UDP_DLATCH_P_PP_PG_N_V

/**
 * udp_dlatch$P_pp$PG$N: D-latch, gated standard drive / active high
 *                       (Q output UDP)
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$P_pp$PG$N (
    Q       ,
    D       ,
    GATE    ,
    NOTIFIER,
    VPWR    ,
    VGND
);

    output Q       ;
    input  D       ;
    input  GATE    ;
    input  NOTIFIER;
    input  VPWR    ;
    input  VGND    ;

    reg Q;

    table
     //  D   GATE NOTIFIER VPWR VGND : Qtn : Qtn+1
         *    0      ?      1    0   :  ?  :   -    ;
         ?   (?0)    ?      1    0   :  ?  :   -    ;
         ?   (1x)    ?      1    0   :  ?  :   -    ;
         0   (0x)    ?      1    0   :  0  :   0    ;
         1   (0x)    ?      1    0   :  1  :   1    ;
         0   (x1)    ?      1    0   :  ?  :   0    ;
         1   (x1)    ?      1    0   :  ?  :   1    ;
        (?0)  1      ?      1    0   :  ?  :   0    ;
        (?1)  1      ?      1    0   :  ?  :   1    ;
         0   (01)    ?      1    0   :  ?  :   0    ;
         1   (01)    ?      1    0   :  ?  :   1    ;
        (?1)  x      ?      1    0   :  1  :   1    ; // Reducing pessimism.
        (?0)  x      ?      1    0   :  0  :   0    ;
         ?    ?      *      1    0   :  ?  :   x    ;
         ?    ?      ?      *    ?   :  ?  :   x    ; // any change on vpwr
         ?    ?      ?      ?    *   :  ?  :   x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_P_PP_PG_N_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_P_PP_PKG_S_V
`define SKY130_FD_SC_HS__UDP_DLATCH_P_PP_PKG_S_V

/**
 * udp_dlatch$P_pp$PKG$s: D-latch, gated standard drive / active high
 *                        (Q output UDP)
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$P_pp$PKG$s (
    Q      ,
    D      ,
    GATE   ,
    SLEEP_B,
    KAPWR  ,
    VGND   ,
    VPWR
);

    output Q      ;
    input  D      ;
    input  GATE   ;
    input  SLEEP_B;
    input  KAPWR  ;
    input  VGND   ;
    input  VPWR   ;

    reg Q;

    table
     //  D   GATE SLEEP_B KAPWR VGND VPWR : Qtn : Qtn+1
         ?    ?      0      1    0    ?   :  ?  :   -    ; // Retain state during sleep
         ?    0      *      1    0    1   :  ?  :   -    ; // Retain state during sleep
         ?    1      *      1    0    1   :  ?  :   x    ; // SLEEPB cannot change unless GATE is low
         ?    x      *      1    0    1   :  ?  :   x    ; // SLEEPB cannot change unless GATE is low
         ?    ?      *      1    0    x   :  ?  :   x    ; // SLEEPB cannot change unless VPWR is high
         ?    ?      *      1    0    0   :  ?  :   x    ; // SLEEPB cannot change unless VPWR is high
         *    0      1      1    0    1   :  ?  :   -    ;
         ?    n      1      1    0    1   :  ?  :   -    ;
         0   (0x)    1      1    0    1   :  0  :   0    ;
         1   (0x)    1      1    0    1   :  1  :   1    ;
         0   (x1)    1      1    0    1   :  ?  :   0    ;
         1   (x1)    1      1    0    1   :  ?  :   1    ;
        (?0)  1      1      1    0    1   :  ?  :   0    ;
        (?1)  1      1      1    0    1   :  ?  :   1    ;
         0   (01)    1      1    0    1   :  ?  :   0    ;
         1   (01)    1      1    0    1   :  ?  :   1    ;
        (?1)  x      1      1    0    1   :  1  :   1    ; // Reducing pessimism.
        (?0)  x      1      1    0    1   :  0  :   0    ;
         ?    ?      ?      *    ?    1   :  ?  :   x    ; // unknown if kapwr changes
         ?    ?      ?      ?    *    1   :  ?  :   x    ; // unknown if vgnd changes
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_P_PP_PKG_S_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_P_PP_PKG_SN_V
`define SKY130_FD_SC_HS__UDP_DLATCH_P_PP_PKG_SN_V

/**
 * udp_dlatch$P_pp$PKG$sN: D-latch, gated standard drive / active high
 *                         (Q output UDP)
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$P_pp$PKG$sN (
    Q       ,
    D       ,
    GATE    ,
    SLEEP_B ,
    NOTIFIER,
    KAPWR   ,
    VGND    ,
    VPWR
);

    output Q       ;
    input  D       ;
    input  GATE    ;
    input  SLEEP_B ;
    input  NOTIFIER;
    input  KAPWR   ;
    input  VGND    ;
    input  VPWR    ;

    reg Q;

    table
     //  D   GATE SLEEP_B NOTIFIER KAPWR VGND VPWR : Qtn : Qtn+1
         ?    ?      0       ?       1    0    ?   :  ?  :   -    ; // Retain state during sleep
         ?    0      *       ?       1    0    1   :  ?  :   -    ; // Retain state during sleep
         ?    1      *       ?       1    0    1   :  ?  :   x    ; // SLEEPB cannot change unless GATE is low
         ?    x      *       ?       1    0    1   :  ?  :   x    ; // SLEEPB cannot change unless GATE is low
         ?    ?      *       ?       1    0    x   :  ?  :   x    ; // SLEEPB cannot change unless VPWR is high
         ?    ?      *       ?       1    0    0   :  ?  :   x    ; // SLEEPB cannot change unless VPWR is high
         *    0      1       ?       1    0    1   :  ?  :   -    ;
         ?    n      1       ?       1    0    1   :  ?  :   -    ;
         0   (0x)    1       ?       1    0    1   :  0  :   0    ;
         1   (0x)    1       ?       1    0    1   :  1  :   1    ;
         0   (x1)    1       ?       1    0    1   :  ?  :   0    ;
         1   (x1)    1       ?       1    0    1   :  ?  :   1    ;
        (?0)  1      1       ?       1    0    1   :  ?  :   0    ;
        (?1)  1      1       ?       1    0    1   :  ?  :   1    ;
         0   (01)    1       ?       1    0    1   :  ?  :   0    ;
         1   (01)    1       ?       1    0    1   :  ?  :   1    ;
        (?1)  x      1       ?       1    0    1   :  1  :   1    ; // Reducing pessimism.
        (?0)  x      1       ?       1    0    1   :  0  :   0    ;
         ?    ?      1       *       1    0    1   :  ?  :   x    ;
         ?    ?      ?       ?       *    ?    1   :  ?  :   x    ; // unknown if kapwr changes
         ?    ?      ?       ?       ?    *    1   :  ?  :   x    ; // unknown if vgnd changes
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_P_PP_PKG_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_P_PP_SN_V
`define SKY130_FD_SC_HS__UDP_DLATCH_P_PP_SN_V

/**
 * udp_dlatch$P_pp$sN: D-latch, gated standard drive / active high
 *                     (Q output UDP)
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$P_pp$sN (
    Q       ,
    D       ,
    GATE    ,
    SLEEP_B ,
    NOTIFIER
);

    output Q       ;
    input  D       ;
    input  GATE    ;
    input  SLEEP_B ;
    input  NOTIFIER;

    reg Q;

    table
     //  D   GATE SLEEP_B NOTIFIER : Qtn : Qtn+1
         ?    ?      0       ?     :  ?  :   -    ;
         ?    ?     (01)     ?     :  ?  :   -    ;
         *    0      1       ?     :  ?  :   -    ;
         ?    n      1       ?     :  ?  :   -    ;
         0   (0x)    1       ?     :  0  :   0    ;
         1   (0x)    1       ?     :  1  :   1    ;
         0   (x1)    1       ?     :  ?  :   0    ;
         1   (x1)    1       ?     :  ?  :   1    ;
        (?0)  1      1       ?     :  ?  :   0    ;
        (?1)  1      1       ?     :  ?  :   1    ;
         0   (01)    1       ?     :  ?  :   0    ;
         1   (01)    1       ?     :  ?  :   1    ;
        (?1)  x      1       ?     :  1  :   1    ; // Reducing pessimism.
        (?0)  x      1       ?     :  0  :   0    ;
         ?    ?      1       *     :  ?  :   x    ;
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_P_PP_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_PG_V
`define SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_PG_V

/**
 * udp_dlatch$PR_pp$PG: D-latch, gated clear direct / gate active high
 *                      (Q output UDP)
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$PR_pp$PG (
    Q    ,
    D    ,
    GATE ,
    RESET,
    VPWR ,
    VGND
);

    output Q    ;
    input  D    ;
    input  GATE ;
    input  RESET;
    input  VPWR ;
    input  VGND ;

    reg Q;

    table
     //  D   GATE RESET VPWR VGND :  Qt : Qt+1
         *    0     0    1    0   :  ?  :  -    ;
         ?    ?     1    1    0   :  ?  :  0    ; // asynchro clear
         ?   (?0)   0    1    0   :  ?  :  -    ; // Changed R=? to R=0 ; jek 08/14/06/
         ?   (1x)   0    1    0   :  ?  :  -    ; // Changed R=? to R=0 ; jek 08/14/06
         0   (0x)   0    1    0   :  0  :  0    ;
         1   (0x)   0    1    0   :  1  :  1    ;
         0   (x1)   0    1    0   :  ?  :  0    ;
         1   (x1)   0    1    0   :  ?  :  1    ;
        (?0)  1     0    1    0   :  ?  :  0    ;
        (?1)  1     0    1    0   :  ?  :  1    ;
         0   (01)   0    1    0   :  ?  :  0    ;
         1   (01)   0    1    0   :  ?  :  1    ;
         ?    0    (?x)  1    0   :  0  :  0    ; // Reducing pessimism.//AB
         *    0     x    1    0   :  0  :  0    ; // Reducing pessimism//AB
         0   (?1)   x    1    0   :  ?  :  0    ; // Reducing pessimism.
        (?0)  1     x    1    0   :  ?  :  0    ; // Reducing pessimism.
         0    1    (?x)  1    0   :  ?  :  0    ; // Reducing pessimism.//AB
         ?    0    (?0)  1    0   :  ?  :  -    ; // ignore edge on clear
         0    1    (?0)  1    0   :  ?  :  0    ; // pessimism .
         1    1    (?0)  1    0   :  ?  :  1    ;
        (?1)  x     0    1    0   :  1  :  1    ; // Reducing pessimism.
        (?0)  x     0    1    0   :  0  :  0    ; // Reducing pessimism.
         ?    ?     ?    *    ?   :  ?  :  x    ; // any change on vpwr
         ?    ?     ?    ?    *   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_PG_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_PG_N_V
`define SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_PG_N_V

/**
 * udp_dlatch$PR_pp$PG$N: D-latch, gated clear direct / gate active
 *                        high (Q output UDP)
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$PR_pp$PG$N (
    Q       ,
    D       ,
    GATE    ,
    RESET   ,
    NOTIFIER,
    VPWR    ,
    VGND
);

    output Q       ;
    input  D       ;
    input  GATE    ;
    input  RESET   ;
    input  NOTIFIER;
    input  VPWR    ;
    input  VGND    ;

    reg Q;

    table
     //  D   GATE RESET NOTIFIER VPWR VGND :  Qt : Qt+1
         *    0     0      ?      1    0   :  ?  :  -    ;
         ?    ?     1      ?      1    0   :  ?  :  0    ; // asynchro clear
         ?   (?0)   0      ?      1    0   :  ?  :  -    ; // Changed R=? to R=0 ; jek 08/14/06/
         ?   (1x)   0      ?      1    0   :  ?  :  -    ; // Changed R=? to R=0 ; jek 08/14/06
         0   (0x)   0      ?      1    0   :  0  :  0    ;
         1   (0x)   0      ?      1    0   :  1  :  1    ;
         0   (x1)   0      ?      1    0   :  ?  :  0    ;
         1   (x1)   0      ?      1    0   :  ?  :  1    ;
        (?0)  1     0      ?      1    0   :  ?  :  0    ;
        (?1)  1     0      ?      1    0   :  ?  :  1    ;
         0   (01)   0      ?      1    0   :  ?  :  0    ;
         1   (01)   0      ?      1    0   :  ?  :  1    ;
         ?    0    (?x)    ?      1    0   :  0  :  0    ; // Reducing pessimism.//AB
         *    0     x      ?      1    0   :  0  :  0    ; // Reducing pessimism//AB
         0   (?1)   x      ?      1    0   :  ?  :  0    ; // Reducing pessimism.
        (?0)  1     x      ?      1    0   :  ?  :  0    ; // Reducing pessimism.
         0    1    (?x)    ?      1    0   :  ?  :  0    ; // Reducing pessimism.//AB
         ?    0    (?0)    ?      1    0   :  ?  :  -    ; // ignore edge on clear
         0    1    (?0)    ?      1    0   :  ?  :  0    ; // pessimism .
         1    1    (?0)    ?      1    0   :  ?  :  1    ;
        (?1)  x     0      ?      1    0   :  1  :  1    ; // Reducing pessimism.
        (?0)  x     0      ?      1    0   :  0  :  0    ; // Reducing pessimism.
         ?    ?     ?      *      1    0   :  ?  :  x    ;
         ?    ?     ?      ?      *    ?   :  ?  :  x    ; // any change on vpwr
         ?    ?     ?      ?      ?    *   :  ?  :  x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_PG_N_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_PKG_S_V
`define SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_PKG_S_V

/**
 * udp_dlatch$PR_pp$PKG$s: D-latch, gated clear direct / gate active
 *                         high (Q output UDP)
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$PR_pp$PKG$s (
    Q      ,
    D      ,
    GATE   ,
    RESET  ,
    SLEEP_B,
    KAPWR  ,
    VGND   ,
    VPWR
);

    output Q      ;
    input  D      ;
    input  GATE   ;
    input  RESET  ;
    input  SLEEP_B;
    input  KAPWR  ;
    input  VGND   ;
    input  VPWR   ;

    reg Q;

    table
     //  D   GATE RESET SLEEP_B KAPWR VGND VPWR :  Qt : Qt+1
         ?    ?     ?      0      1    0    ?   :  ?  :  -    ; // Retain state during sleep
         ?    0     0      *      1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?    0     1      *      1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?    0     x      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change if clear is unknown
         ?    1     ?      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless GATE is low
         ?    x     ?      *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless GATE is low
         ?    ?     ?      *      1    0    x   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         ?    ?     ?      *      1    0    0   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         *    0     0      1      1    0    1   :  ?  :  -    ;
         ?    ?     1      1      1    0    1   :  ?  :  0    ; // asynchro clear
         ?   (?0)   0      1      1    0    1   :  ?  :  -    ; // Changed R=? to R=0
         ?   (1x)   0      1      1    0    1   :  ?  :  -    ; // Changed R=? to R=0
         0   (0x)   0      1      1    0    1   :  0  :  0    ;
         1   (0x)   0      1      1    0    1   :  1  :  1    ;
         0   (x1)   0      1      1    0    1   :  ?  :  0    ;
         1   (x1)   0      1      1    0    1   :  ?  :  1    ;
        (?0)  1     0      1      1    0    1   :  ?  :  0    ;
        (?1)  1     0      1      1    0    1   :  ?  :  1    ;
         0   (01)   0      1      1    0    1   :  ?  :  0    ;
         1   (01)   0      1      1    0    1   :  ?  :  1    ;
         ?    0    (?x)    1      1    0    1   :  0  :  0    ; // Reducing pessimism.//AB
         *    0     x      1      1    0    1   :  0  :  0    ; // Reducing pessimism//AB
         0   (?1)   x      1      1    0    1   :  ?  :  0    ; // Reducing pessimism.
        (?0)  1     x      1      1    0    1   :  ?  :  0    ; // Reducing pessimism.
         0    1    (?x)    1      1    0    1   :  ?  :  0    ; // Reducing pessimism.//AB
         ?    0    (?0)    1      1    0    1   :  ?  :  -    ; // ignore edge on clear
         0    1    (?0)    1      1    0    1   :  ?  :  0    ; // pessimism .
         1    1    (?0)    1      1    0    1   :  ?  :  1    ;
        (?1)  x     0      1      1    0    1   :  1  :  1    ; // Reducing pessimism.
        (?0)  x     0      1      1    0    1   :  0  :  0    ; // Reducing pessimism.
         ?    ?     ?      ?      *    ?    1   :  ?  :  x    ; // unknown if kapwr changes
         ?    ?     ?      ?      ?    *    1   :  ?  :  x    ; // unknown if vgnd changes
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_PKG_S_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_PKG_SN_V
`define SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_PKG_SN_V

/**
 * udp_dlatch$PR_pp$PKG$sN: D-latch, gated clear direct / gate active
 *                          high (Q output UDP)
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$PR_pp$PKG$sN (
    Q       ,
    D       ,
    GATE    ,
    RESET   ,
    SLEEP_B ,
    NOTIFIER,
    KAPWR   ,
    VGND    ,
    VPWR
);

    output Q       ;
    input  D       ;
    input  GATE    ;
    input  RESET   ;
    input  SLEEP_B ;
    input  NOTIFIER;
    input  KAPWR   ;
    input  VGND    ;
    input  VPWR    ;

    reg Q;

    table
     //  D   GATE RESET SLEEP_B NOTIFIER KAPWR VGND VPWR :  Qt : Qt+1
         ?    ?     ?      0       ?       1    0    ?   :  ?  :  -    ; // Retain state during sleep
         ?    0     0      *       ?       1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?    0     1      *       ?       1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?    0     x      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change if clear is unknown
         ?    1     ?      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless GATE is low
         ?    x     ?      *       ?       1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless GATE is low
         ?    ?     ?      *       ?       1    0    x   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         ?    ?     ?      *       ?       1    0    0   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         *    0     0      1       ?       1    0    1   :  ?  :  -    ;
         ?    ?     1      1       ?       1    0    1   :  ?  :  0    ; // asynchro clear
         ?   (?0)   0      1       ?       1    0    1   :  ?  :  -    ; // Changed R=? to R=0
         ?   (1x)   0      1       ?       1    0    1   :  ?  :  -    ; // Changed R=? to R=0
         0   (0x)   0      1       ?       1    0    1   :  0  :  0    ;
         1   (0x)   0      1       ?       1    0    1   :  1  :  1    ;
         0   (x1)   0      1       ?       1    0    1   :  ?  :  0    ;
         1   (x1)   0      1       ?       1    0    1   :  ?  :  1    ;
        (?0)  1     0      1       ?       1    0    1   :  ?  :  0    ;
        (?1)  1     0      1       ?       1    0    1   :  ?  :  1    ;
         0   (01)   0      1       ?       1    0    1   :  ?  :  0    ;
         1   (01)   0      1       ?       1    0    1   :  ?  :  1    ;
         ?    0    (?x)    1       ?       1    0    1   :  0  :  0    ; // Reducing pessimism.//AB
         *    0     x      1       ?       1    0    1   :  0  :  0    ; // Reducing pessimism//AB
         0   (?1)   x      1       ?       1    0    1   :  ?  :  0    ; // Reducing pessimism.
        (?0)  1     x      1       ?       1    0    1   :  ?  :  0    ; // Reducing pessimism.
         0    1    (?x)    1       ?       1    0    1   :  ?  :  0    ; // Reducing pessimism.//AB
         ?    0    (?0)    1       ?       1    0    1   :  ?  :  -    ; // ignore edge on clear
         0    1    (?0)    1       ?       1    0    1   :  ?  :  0    ; // pessimism .
         1    1    (?0)    1       ?       1    0    1   :  ?  :  1    ;
        (?1)  x     0      1       ?       1    0    1   :  1  :  1    ; // Reducing pessimism.
        (?0)  x     0      1       ?       1    0    1   :  0  :  0    ; // Reducing pessimism.
         ?    ?     ?      1       *       1    0    1   :  ?  :  x    ;
         ?    ?     ?      ?       ?       *    ?    1   :  ?  :  x    ; // unknown if kapwr changes
         ?    ?     ?      ?       ?       ?    *    1   :  ?  :  x    ; // unknown if vgnd changes
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_PKG_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_SN_V
`define SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_SN_V

/**
 * udp_dlatch$PR_pp$sN: D-latch, gated clear direct / gate active high
 *                      (Q output UDP)
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$PR_pp$sN (
    Q       ,
    D       ,
    GATE    ,
    RESET   ,
    SLEEP_B ,
    NOTIFIER
);

    output Q       ;
    input  D       ;
    input  GATE    ;
    input  RESET   ;
    input  SLEEP_B ;
    input  NOTIFIER;

    reg Q;

    table
     //  D   GATE RESET SLEEP_B NOTIFIER :  Qt : Qt+1
         ?    ?     ?      0       ?     :  ?  :  -    ; // Retain state during sleep
         ?    ?     ?     (01)     ?     :  ?  :  -    ; // Retain state during sleep
         *    0     0      1       ?     :  ?  :  -    ;
         ?    ?     1      1       ?     :  ?  :  0    ; // asynchro clear
         ?   (?0)   0      1       ?     :  ?  :  -    ; // Changed R=? to R=0
         ?   (1x)   0      1       ?     :  ?  :  -    ; // Changed R=? to R=0
         0   (0x)   0      1       ?     :  0  :  0    ;
         1   (0x)   0      1       ?     :  1  :  1    ;
         0   (x1)   0      1       ?     :  ?  :  0    ;
         1   (x1)   0      1       ?     :  ?  :  1    ;
        (?0)  1     0      1       ?     :  ?  :  0    ;
        (?1)  1     0      1       ?     :  ?  :  1    ;
         0   (01)   0      1       ?     :  ?  :  0    ;
         1   (01)   0      1       ?     :  ?  :  1    ;
         ?    0    (?x)    1       ?     :  0  :  0    ; // Reducing pessimism.//AB
         *    0     x      1       ?     :  0  :  0    ; // Reducing pessimism//AB
         0   (?1)   x      1       ?     :  ?  :  0    ; // Reducing pessimism.
        (?0)  1     x      1       ?     :  ?  :  0    ; // Reducing pessimism.
         0    1    (?x)    1       ?     :  ?  :  0    ; // Reducing pessimism.//AB
         ?    0    (?0)    1       ?     :  ?  :  -    ; // ignore edge on clear
         0    1    (?0)    1       ?     :  ?  :  0    ; // pessimism .
         1    1    (?0)    1       ?     :  ?  :  1    ;
        (?1)  x     0      1       ?     :  1  :  1    ; // Reducing pessimism.
        (?0)  x     0      1       ?     :  0  :  0    ; // Reducing pessimism.
         ?    ?     ?      1       *     :  ?  :  x    ;
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_PR_PP_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_PSA_PP_PKG_S_V
`define SKY130_FD_SC_HS__UDP_DLATCH_PSA_PP_PKG_S_V

/**
 * udp_dlatch$PSa_pp$PKG$s: Positive level sensitive D-type -latch
 *                          with active low
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$PSa_pp$PKG$s (
    Q        ,
    D        ,
    GATE     ,
    SET_ASYNC,
    SLEEP_B  ,
    KAPWR    ,
    VGND     ,
    VPWR
);

    output Q        ;
    input  D        ;
    input  GATE     ;
    input  SET_ASYNC;
    input  SLEEP_B  ;
    input  KAPWR    ;
    input  VGND     ;
    input  VPWR     ;

    reg Q;

    table
     //  D   GATE SET_ASYNC SLEEP_B KAPWR VGND VPWR :  Qt : Qt+1
         ?    ?       ?        0      1    0    ?   :  ?  :  -    ; // Retain state during sleep
         ?    0       0        *      1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?    0       1        *      1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?    0       x        *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change if preset is unknown
         ?    1       ?        *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless GATE is low
         ?    x       ?        *      1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless GATE is low
         ?    ?       ?        *      1    0    x   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is low
         *    0       1        1      1    0    1   :  ?  :  -    ;
         ?    ?       0        1      1    0    1   :  ?  :  1    ; // asynchro SET
         ?   (?0)     ?        1      1    0    1   :  ?  :  -    ; // AB
         ?   (1X)     ?        1      1    0    1   :  ?  :  -    ; // AB
         0   (X1)     1        1      1    0    1   :  ?  :  0    ;
         1   (X1)     1        1      1    0    1   :  ?  :  1    ;
         0   (0X)     1        1      1    0    1   :  0  :  0    ;
         1   (0X)     1        1      1    0    1   :  1  :  1    ;
        (?0)  1       1        1      1    0    1   :  ?  :  0    ;
        (?1)  1       1        1      1    0    1   :  ?  :  1    ;
         0   (01)     1        1      1    0    1   :  ?  :  0    ;
         1   (01)     1        1      1    0    1   :  ?  :  1    ;
         ?    0      (?x)      1      1    0    1   :  1  :  1    ; // Reducing pessimism.//AB
         *    0       x        1      1    0    1   :  1  :  1    ; // Reducing pessimism//AB
        (?1)  x       x        1      1    0    1   :  1  :  1    ; // Reducing pessimism.//AB
         1    x       *        1      1    0    1   :  1  :  1    ; // Reducing pessimism.//AB
         1   (0x)     x        1      1    0    1   :  1  :  1    ; // Reducing pessimism.//AB
         1   (?1)     x        1      1    0    1   :  ?  :  1    ; // Reducing pessimism.
        (?1)  1       x        1      1    0    1   :  ?  :  1    ; // Reducing pessimism.
         1    1      (?x)      1      1    0    1   :  ?  :  1    ; // Reducing pessimism.
         ?    0      (?1)      1      1    0    1   :  ?  :  -    ; // ignore edge on clear
         0    1      (?1)      1      1    0    1   :  ?  :  0    ;
         1    1      (?1)      1      1    0    1   :  ?  :  1    ;
        (?1)  x       1        1      1    0    1   :  1  :  1    ; // Reducing pessimism.
        (?0)  x       1        1      1    0    1   :  0  :  0    ; // Reducing pessimism.
         ?    ?       ?        ?      *    ?    1   :  ?  :  x    ; // unknown if kapwr changes
         ?    ?       ?        ?      ?    *    1   :  ?  :  x    ; // unknown if vgnd changes
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_PSA_PP_PKG_S_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_PSA_PP_PKG_SN_V
`define SKY130_FD_SC_HS__UDP_DLATCH_PSA_PP_PKG_SN_V

/**
 * udp_dlatch$PSa_pp$PKG$sN: Positive level sensitive D-type -latch
 *                           with active low
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$PSa_pp$PKG$sN (
    Q           ,
    D           ,
    GATE        ,
    SET_ASYNC   ,
    SLEEP_B     ,
    NOTIFIER_REG,
    KAPWR       ,
    VGND        ,
    VPWR
);

    output Q           ;
    input  D           ;
    input  GATE        ;
    input  SET_ASYNC   ;
    input  SLEEP_B     ;
    input  NOTIFIER_REG;
    input  KAPWR       ;
    input  VGND        ;
    input  VPWR        ;

    reg Q;

    table
     //  D   GATE SET_ASYNC SLEEP_B NOTIFIER_REG KAPWR VGND VPWR :  Qt : Qt+1
         ?    ?       ?        0         ?         1    0    ?   :  ?  :  -    ; // Retain state during sleep
         ?    0       0        *         ?         1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?    0       1        *         ?         1    0    1   :  ?  :  -    ; // Retain state during sleep
         ?    0       x        *         ?         1    0    1   :  ?  :  x    ; // SLEEPB cannot change if preset is unknown
         ?    1       ?        *         ?         1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless GATE is low
         ?    x       ?        *         ?         1    0    1   :  ?  :  x    ; // SLEEPB cannot change unless GATE is low
         ?    ?       ?        *         ?         1    0    x   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         ?    ?       ?        *         ?         1    0    0   :  ?  :  x    ; // SLEEPB cannot change unless VPWR is high
         *    0       1        1         ?         1    0    1   :  ?  :  -    ;
         ?    ?       0        1         ?         1    0    1   :  ?  :  1    ; // asynchro SET
         ?   (?0)     ?        1         ?         1    0    1   :  ?  :  -    ; // AB
         ?   (1X)     ?        1         ?         1    0    1   :  ?  :  -    ; // AB
         0   (X1)     1        1         ?         1    0    1   :  ?  :  0    ;
         1   (X1)     1        1         ?         1    0    1   :  ?  :  1    ;
         0   (0X)     1        1         ?         1    0    1   :  0  :  0    ;
         1   (0X)     1        1         ?         1    0    1   :  1  :  1    ;
        (?0)  1       1        1         ?         1    0    1   :  ?  :  0    ;
        (?1)  1       1        1         ?         1    0    1   :  ?  :  1    ;
         0   (01)     1        1         ?         1    0    1   :  ?  :  0    ;
         1   (01)     1        1         ?         1    0    1   :  ?  :  1    ;
         ?    0      (?x)      1         ?         1    0    1   :  1  :  1    ; // Reducing pessimism.//AB
         *    0       x        1         ?         1    0    1   :  1  :  1    ; // Reducing pessimism//AB
        (?1)  x       x        1         ?         1    0    1   :  1  :  1    ; // Reducing pessimism.//AB
         1    x       *        1         ?         1    0    1   :  1  :  1    ; // Reducing pessimism.//AB
         1   (0x)     x        1         ?         1    0    1   :  1  :  1    ; // Reducing pessimism.//AB
         1   (?1)     x        1         ?         1    0    1   :  ?  :  1    ; // Reducing pessimism.
        (?1)  1       x        1         ?         1    0    1   :  ?  :  1    ; // Reducing pessimism.
         1    1      (?x)      1         ?         1    0    1   :  ?  :  1    ; // Reducing pessimism.
         ?    0      (?1)      1         ?         1    0    1   :  ?  :  -    ; // ignore edge on clear
         0    1      (?1)      1         ?         1    0    1   :  ?  :  0    ;
         1    1      (?1)      1         ?         1    0    1   :  ?  :  1    ;
        (?1)  x       1        1         ?         1    0    1   :  1  :  1    ; // Reducing pessimism.
        (?0)  x       1        1         ?         1    0    1   :  0  :  0    ; // Reducing pessimism.
         ?    ?       ?        1         *         1    0    1   :  ?  :  x    ;
         ?    ?       ?        ?         ?         *    ?    1   :  ?  :  x    ; // unknown if kapwr changes
         ?    ?       ?        ?         ?         ?    *    1   :  ?  :  x    ; // unknown if vgnd changes
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_PSA_PP_PKG_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_DLATCH_PSA_PP_SN_V
`define SKY130_FD_SC_HS__UDP_DLATCH_PSA_PP_SN_V

/**
 * udp_dlatch$PSa_pp$sN: Positive level sensitive D-type -latch with
 *                       active low
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_dlatch$PSa_pp$sN (
    Q           ,
    D           ,
    GATE        ,
    SET_ASYNC   ,
    SLEEP_B     ,
    NOTIFIER_REG
);

    output Q           ;
    input  D           ;
    input  GATE        ;
    input  SET_ASYNC   ;
    input  SLEEP_B     ;
    input  NOTIFIER_REG;

    reg Q;

    table
     //  D   GATE SET_ASYNC SLEEP_B NOTIFIER_REG :  Qt : Qt+1
         ?    ?       ?        0         ?       :  ?  :  -    ; // Retain state during sleep
         ?    ?       ?       (01)       ?       :  ?  :  -    ; // Retain state during sleep
         *    0       1        1         ?       :  ?  :  -    ;
         ?    ?       0        1         ?       :  ?  :  1    ; // asynchro SET
         ?   (?0)     ?        1         ?       :  ?  :  -    ; // AB
         ?   (1X)     ?        1         ?       :  ?  :  -    ; // AB
         0   (X1)     1        1         ?       :  ?  :  0    ;
         1   (X1)     1        1         ?       :  ?  :  1    ;
         0   (0X)     1        1         ?       :  0  :  0    ;
         1   (0X)     1        1         ?       :  1  :  1    ;
        (?0)  1       1        1         ?       :  ?  :  0    ;
        (?1)  1       1        1         ?       :  ?  :  1    ;
         0   (01)     1        1         ?       :  ?  :  0    ;
         1   (01)     1        1         ?       :  ?  :  1    ;
         ?    0      (?x)      1         ?       :  1  :  1    ; // Reducing pessimism.//AB
         *    0       x        1         ?       :  1  :  1    ; // Reducing pessimism//AB
        (?1)  x       x        1         ?       :  1  :  1    ; // Reducing pessimism.//AB
         1    x       *        1         ?       :  1  :  1    ; // Reducing pessimism.//AB
         1   (0x)     x        1         ?       :  1  :  1    ; // Reducing pessimism.//AB
         1   (?1)     x        1         ?       :  ?  :  1    ; // Reducing pessimism.
        (?1)  1       x        1         ?       :  ?  :  1    ; // Reducing pessimism.
         1    1      (?x)      1         ?       :  ?  :  1    ; // Reducing pessimism.
         ?    0      (?1)      1         ?       :  ?  :  -    ; // ignore edge on clear
         0    1      (?1)      1         ?       :  ?  :  0    ;
         1    1      (?1)      1         ?       :  ?  :  1    ;
        (?1)  x       1        1         ?       :  1  :  1    ; // Reducing pessimism.
        (?0)  x       1        1         ?       :  0  :  0    ; // Reducing pessimism.
         ?    ?       ?        1         *       :  ?  :  x    ;
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_DLATCH_PSA_PP_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_ISOLATCH_PP_PKG_S_V
`define SKY130_FD_SC_HS__UDP_ISOLATCH_PP_PKG_S_V

/**
 * udp_isolatch_pp$PKG$s: Power isolating latch. Includes VPWR, KAPWR,
 *                        and VGND power pins with active low sleep
 *                        pin (SLEEP_B).
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_isolatch_pp$PKG$s (
    Q      ,
    D      ,
    SLEEP_B,
    KAPWR  ,
    VGND   ,
    VPWR
);

    output Q      ;
    input  D      ;
    input  SLEEP_B;
    input  KAPWR  ;
    input  VGND   ;
    input  VPWR   ;

    reg Q;

    table
     //  D   SLEEP_B KAPWR VGND VPWR : Qtn : Qtn+1
         *      0      1    0    1   :  ?  :   -    ;
         ?     (?0)    1    0    1   :  ?  :   -    ;
         ?     (1x)    1    0    1   :  ?  :   -    ;
         0     (0x)    1    0    1   :  0  :   0    ;
         1     (0x)    1    0    1   :  1  :   1    ;
         0     (x1)    1    0    1   :  ?  :   0    ;
         1     (x1)    1    0    1   :  ?  :   1    ;
        (?0)    1      1    0    1   :  ?  :   0    ;
        (?1)    1      1    0    1   :  ?  :   1    ;
         0     (01)    1    0    1   :  ?  :   0    ;
         1     (01)    1    0    1   :  ?  :   1    ;
        (?1)    x      1    0    1   :  1  :   1    ; // Reducing pessimism.
        (?0)    x      1    0    1   :  0  :   0    ;
         ?      1      1    0    *   :  ?  :   x    ; // any change on vpwr when not in sleep mode
         ?      x      1    0    *   :  ?  :   x    ; // any change on vpwr when not in sleep mode
         ?      ?      *    ?    1   :  ?  :   x    ; // any change on kapwr
         ?      ?      ?    *    1   :  ?  :   x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_ISOLATCH_PP_PKG_S_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_ISOLATCH_PP_PKG_SN_V
`define SKY130_FD_SC_HS__UDP_ISOLATCH_PP_PKG_SN_V

/**
 * udp_isolatch_pp$PKG$sN: Power isolating latch. Includes VPWR,
 *                         KAPWR, and VGND power pins with notifier
 *                         and active low sleep pin (SLEEP_B).
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_isolatch_pp$PKG$sN (
    Q       ,
    D       ,
    SLEEP_B ,
    NOTIFIER,
    KAPWR   ,
    VGND    ,
    VPWR
);

    output Q       ;
    input  D       ;
    input  SLEEP_B ;
    input  NOTIFIER;
    input  KAPWR   ;
    input  VGND    ;
    input  VPWR    ;

    reg Q;

    table
     //  D   SLEEP_B NOTIFIER KAPWR VGND VPWR : Qtn : Qtn+1
         *      0       ?       1    0    1   :  ?  :   -    ;
         ?     (?0)     ?       1    0    1   :  ?  :   -    ;
         ?     (1x)     ?       1    0    1   :  ?  :   -    ;
         0     (0x)     ?       1    0    1   :  0  :   0    ;
         1     (0x)     ?       1    0    1   :  1  :   1    ;
         0     (x1)     ?       1    0    1   :  ?  :   0    ;
         1     (x1)     ?       1    0    1   :  ?  :   1    ;
        (?0)    1       ?       1    0    1   :  ?  :   0    ;
        (?1)    1       ?       1    0    1   :  ?  :   1    ;
         0     (01)     ?       1    0    1   :  ?  :   0    ;
         1     (01)     ?       1    0    1   :  ?  :   1    ;
        (?1)    x       ?       1    0    1   :  1  :   1    ; // Reducing pessimism.
        (?0)    x       ?       1    0    1   :  0  :   0    ;
         ?      ?       *       1    0    1   :  ?  :   x    ; // any change on notifier
         ?      1       ?       1    0    *   :  ?  :   x    ; // any change on vpwr when not in sleep mode
         ?      x       ?       1    0    *   :  ?  :   x    ; // any change on vpwr when not in sleep mode
         ?      ?       ?       *    ?    1   :  ?  :   x    ; // any change on kapwr
         ?      ?       ?       ?    *    1   :  ?  :   x    ; // any change on vgnd
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_ISOLATCH_PP_PKG_SN_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_MUX_2TO1_V
`define SKY130_FD_SC_HS__UDP_MUX_2TO1_V

/**
 * udp_mux_2to1: Two to one multiplexer
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_mux_2to1 (
    X ,
    A0,
    A1,
    S
);

    output X ;
    input  A0;
    input  A1;
    input  S ;

    table
     //  A0  A1  S  :  X
         0   0   ?  :  0   ;
         1   1   ?  :  1   ;
         0   ?   0  :  0   ;
         1   ?   0  :  1   ;
         ?   0   1  :  0   ;
         ?   1   1  :  1   ;
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_MUX_2TO1_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_MUX_2TO1_N_V
`define SKY130_FD_SC_HS__UDP_MUX_2TO1_N_V

/**
 * udp_mux_2to1_N: Two to one multiplexer with inverting output
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_mux_2to1_N (
    Y ,
    A0,
    A1,
    S
);

    output Y ;
    input  A0;
    input  A1;
    input  S ;

    table
     //  A0  A1  S  :  Y
         0   ?   0  :  1   ;
         1   ?   0  :  0   ;
         ?   0   1  :  1   ;
         ?   1   1  :  0   ;
         0   0   ?  :  1   ;
         1   1   ?  :  0   ;
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_MUX_2TO1_N_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_MUX_4TO2_V
`define SKY130_FD_SC_HS__UDP_MUX_4TO2_V

/**
 * udp_mux_4to2: Four to one multiplexer with 2 select controls
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_mux_4to2 (
    X ,
    A0,
    A1,
    A2,
    A3,
    S0,
    S1
);

    output X ;
    input  A0;
    input  A1;
    input  A2;
    input  A3;
    input  S0;
    input  S1;

    table
     //  A0  A1  A2  A3  S0  S1 :  X
         0   ?   ?   ?   0   0  :  0   ;
         1   ?   ?   ?   0   0  :  1   ;
         ?   0   ?   ?   1   0  :  0   ;
         ?   1   ?   ?   1   0  :  1   ;
         ?   ?   0   ?   0   1  :  0   ;
         ?   ?   1   ?   0   1  :  1   ;
         ?   ?   ?   0   1   1  :  0   ;
         ?   ?   ?   1   1   1  :  1   ;
         0   0   0   0   ?   ?  :  0   ;
         1   1   1   1   ?   ?  :  1   ;
         0   0   ?   ?   ?   0  :  0   ;
         1   1   ?   ?   ?   0  :  1   ;
         ?   ?   0   0   ?   1  :  0   ;
         ?   ?   1   1   ?   1  :  1   ;
         0   ?   0   ?   0   ?  :  0   ;
         1   ?   1   ?   0   ?  :  1   ;
         ?   0   ?   0   1   ?  :  0   ;
         ?   1   ?   1   1   ?  :  1   ;
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_MUX_4TO2_V


//--------EOF---------

/**
 * Copyright 2020 The SkyWater PDK Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

`ifndef SKY130_FD_SC_HS__UDP_PWRGOOD_PP_PG_V
`define SKY130_FD_SC_HS__UDP_PWRGOOD_PP_PG_V

/**

 *   UDP_OUT :=x when VPWR!=1 or VGND!=0
 *   UDP_OUT :=UDP_IN when VPWR==1 and VGND==0
 *
 * Verilog primitive definition.
 *
 * WARNING: This file is autogenerated, do not modify directly!
 */

`timescale 1ns / 1ps
`default_nettype none

`ifdef NO_PRIMITIVES
`else
primitive sky130_fd_sc_hs__udp_pwrgood_pp$PG (
    UDP_OUT,
    UDP_IN ,
    VPWR   ,
    VGND
);

    output UDP_OUT;
    input  UDP_IN ;
    input  VPWR   ;
    input  VGND   ;

    table
     // UDP_IN VPWR VGND : out
          0     1    0   :  0   ;
          1     1    0   :  1   ;
          x     1    0   :  x   ;
          ?     0    0   :  x   ;
          ?     1    1   :  x   ;
          ?     x    0   :  x   ;
          ?     1    x   :  x   ;
    endtable
endprimitive
`endif // NO_PRIMITIVES

`default_nettype wire
`endif  // SKY130_FD_SC_HS__UDP_PWRGOOD_PP_PG_V


//--------EOF---------

